# -*- coding: utf-8 -*-
"""“CS-777-Final-Exam-Template2.ipynb”的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Modlwkv-_GuXm5I_PxCEz9FSVV8CuRSi
"""

# Spark installation on Colab
# !pip install --ignore-installed -q pyspark

from pyspark import SparkContext
from pyspark.sql import SparkSession
sc = SparkContext("local")
spark = SparkSession.builder.getOrCreate()

"""# Downolad the data"""

# Download the data
# ! wget -q https://storage.googleapis.com/met-cs-777-data/wine-train.csv
# ! wget -q https://storage.googleapis.com/met-cs-777-data/wine-test.csv
# ! ls -la
# ! pwd

"""# Load data"""

path="file:///content/"
wtrain = path+"wine-train.csv"
wtest=path+"wine-test.csv"
train = spark.read.csv(wtrain,header=True,inferSchema=True )
test = spark.read.csv(wtest,header=True,inferSchema=True )

"""If you like to worik with RDD use this transformation. The target label will be the last element of the tuple, and the first 12 values are the features."""

trainRDD = train.rdd.map(tuple)
testRDD = test.rdd.map(tuple)
trainRDD.take(5)

"""If you like to work wiht DataFrames use this code that will create a feature vector column form all 12 features"""

from pyspark.ml.feature import VectorAssembler
feature_columns = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar','chlorides', 'free sulfur dioxide',
 'total sulfur dioxide','density','pH','sulphates','alcohol', 'red']
assembler = VectorAssembler(inputCols=feature_columns, outputCol='features')
train = assembler.transform(train).select("features","label")
test = assembler.transform(test).select("features","label")
train.show()

test.show()

from pyspark.ml.classification import LogisticRegression, LinearSVC
from pyspark.mllib.evaluation import MulticlassMetrics


lr = LogisticRegression(maxIter=10, featuresCol = "features", weightCol="label")
model = lr.fit(train)
predictions = model.transform(test)
result = predictions.select("label","prediction").rdd.map(lambda x: (float(x[0]), float(x[1]))).cache()
metrics = MulticlassMetrics(result)

print("Logistic Regression, Precision: {:.3f}, Recall: {:.3f}, F1: {:.3f}".format(metrics.precision(1.0),
                                                                                  metrics.recall(1.0),
                                                                                  metrics.fMeasure(1.0)) )

svm = LinearSVC(maxIter=10, featuresCol = "features", weightCol="label")
model = svm.fit(train)
predictions = model.transform(test)
result = predictions.select("label","prediction").rdd.map(lambda x: (float(x[0]), float(x[1]))).cache()
metrics = MulticlassMetrics(result)

print("SVM, Precision: {:.3f}, Recall: {:.3f}, F1: {:.3f}".format(metrics.precision(1.0),
                                                                  metrics.recall(1.0),
                                                                  metrics.fMeasure(1.0)))

